// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/refreshToken/refreshToken.go

// Package mock_refreshToken is a generated GoMock package.
package mock_refreshToken

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	types "github.com/h3isenbug/url-shortener/internal/types"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, accountID uint64, token string, lifespan time.Duration) (*types.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, accountID, token, lifespan)
	ret0, _ := ret[0].(*types.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, accountID, token, lifespan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, accountID, token, lifespan)
}

// CreateWithFamily mocks base method.
func (m *MockRepository) CreateWithFamily(ctx context.Context, accountID uint64, token string, lifespan time.Duration, family uint64) (*types.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithFamily", ctx, accountID, token, lifespan, family)
	ret0, _ := ret[0].(*types.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithFamily indicates an expected call of CreateWithFamily.
func (mr *MockRepositoryMockRecorder) CreateWithFamily(ctx, accountID, token, lifespan, family interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithFamily", reflect.TypeOf((*MockRepository)(nil).CreateWithFamily), ctx, accountID, token, lifespan, family)
}

// Disable mocks base method.
func (m *MockRepository) Disable(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disable indicates an expected call of Disable.
func (mr *MockRepositoryMockRecorder) Disable(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockRepository)(nil).Disable), ctx, id)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, token string) (*types.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(*types.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, token)
}

// SetCompromisedState mocks base method.
func (m *MockRepository) SetCompromisedState(ctx context.Context, family uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCompromisedState", ctx, family)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCompromisedState indicates an expected call of SetCompromisedState.
func (mr *MockRepositoryMockRecorder) SetCompromisedState(ctx, family interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCompromisedState", reflect.TypeOf((*MockRepository)(nil).SetCompromisedState), ctx, family)
}
